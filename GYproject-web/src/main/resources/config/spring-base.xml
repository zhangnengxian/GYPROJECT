<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.1.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 引入properties文件 -->
	<!-- <context:property-placeholder location="classpath*:/config/*.properties" /> -->
	<context:property-placeholder location="classpath:config/jdbc.properties" />
	<!-- 定义数据库连接池数据源bean destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		  destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
		<property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
		<!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default:
			0 -->
		<property name="maxStatements" value="${c3p0.maxStatements}" />
		<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
		<property name="maxStatementsPerConnection" value="${c3p0.maxStatementsPerConnection}" />

		<!-- true表示pool向数据库请求连接失败后标记整个pool为block并close，就算后端数据库恢复正常也不进行重连，客户端对pool的请求都拒绝掉。
			false表示不会标记 pool为block，新的请求都会尝试去数据库请求connection。默认为false。 因此，如果想让数据库和网络故障恢复之后，pool能继续请求正常资源必须把此项配置设为false -->
		<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}" />
		<!-- true表示在每次从pool内checkout连接的时候测试其有效性，这是个同步操作，因此应用端的每次数据库调用，都会先通过测试sql测试其有效性，
			如果连接无效，会关闭此连接并剔除出pool，并尝试从pool内取其他连接，默认为false，此特性要慎用，会造成至少多一倍的数据库调用。 -->
		<property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}" />
		<!-- true表示每次把连接checkin到pool里的时候测试其有效性，因为是个事后操作，所以是异步的，应用端不需要等待测试结果，但同样会造成至少多一倍的数据库调用。 -->
		<property name="testConnectionOnCheckin" value="${c3p0.testConnectionOnCheckin}" />
		<!-- C3P0会有一个Task检测pool内的连接是否正常，此参数就是Task运行的频率。默认值为0，表示不进行检测。 -->
		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
		<!-- pool请求取连接失败后重试的次数和重试的频率。请求连接会发生在pool内连接少于min值或则等待请求数>池内能提供的连接数 -->
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}" />
		<property name="acquireRetryDelay" value="${c3p0.acquireRetryDelay}" />
	</bean>

	<!-- 配置sessionFactory -->
	<bean id="sessionFactory"
		  class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />

		<!-- hibernate的相关属性配置 -->
		<property name="hibernateProperties">
			<value>
				<!-- 设置数据库方言 -->
				hibernate.dialect=${hibernate.dialect}
				<!-- 设置自动创建|更新|验证数据库表结构 -->
				hibernate.hbm2ddl.auto=${hibernate.hbm2ddl.auto}
				<!-- 是否在控制台显示sql -->
				hibernate.show_sql=${hibernate.show_sql}
				<!-- 是否格式化sql，优化显示 -->
				hibernate.format_sql=${hibernate.format_sql}
				<!-- 是否开启二级缓存 -->
				hibernate.cache.use_second_level_cache=${hibernate.cache.use_second_level_cache}
				<!-- 是否开启查询缓存 -->
				hibernate.cache.use_query_cache=${hibernate.cache.use_query_cache}
				<!-- 数据库批量查询最大数 -->
				hibernate.jdbc.fetch_size=${hibernate.jdbc.fetch_size}
				<!-- 数据库批量更新、添加、删除操作最大数 -->
				hibernate.jdbc.batch_size=${hibernate.jdbc.batch_size}
				<!-- 是否自动提交事务 -->
				hibernate.connection.autocommit=${hibernate.connection.autocommit}
				<!-- 指定hibernate在何时释放JDBC连接 -->
				hibernate.connection.release_mode=${hibernate.connection.release_mode}
				<!-- 创建session方式 hibernate4.x 的方式 -->
				<!-- hibernate.current_session_context_class=${hibernate.current_session_context_class} -->
				<!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包
					所以把它设置为none即可 -->
				javax.persistence.validation.mode=${javax.persistence.validation.mode}
			</value>
		</property>

		<property name="packagesToScan">
			<list>
				<!-- <value>cc.dfsoft.uexpress.biz.base.addr.entity</value> -->
				<!-- <value>cc.dfsoft.uexpress.biz.base.cust.entity</value> -->
				<value>cc.dfsoft.project.biz.base.mapper.entity</value>
				<value>cc.dfsoft.uexpress.biz.sys.dept.entity</value>
				<value>cc.dfsoft.uexpress.biz.sys.auth.entity</value>
				<value>cc.dfsoft.project.biz.base.project.entity</value>
				<value>cc.dfsoft.project.biz.base.design.entity</value>
				<value>cc.dfsoft.project.biz.base.contract.entity</value>
				<value>cc.dfsoft.project.biz.base.constructmanage.entity</value>
				<value>cc.dfsoft.project.biz.base.budget.entity</value>
				<value>cc.dfsoft.project.biz.base.plan.entity</value>
				<value>cc.dfsoft.project.biz.base.charge.entity</value>
				<value>cc.dfsoft.project.biz.base.subpackage.entity</value>
				<value>cc.dfsoft.project.biz.base.projectbase.entity</value>
				<value>cc.dfsoft.project.biz.base.accept.entity</value>
				<value>cc.dfsoft.project.biz.base.baseinfo.entity</value>
				<value>cc.dfsoft.project.biz.base.inspection.entity</value>
				<value>cc.dfsoft.project.biz.base.change.entity</value>
				<value>cc.dfsoft.project.biz.base.complete.entity</value>
				<value>cc.dfsoft.project.biz.base.settlement.entity</value>
				<value>cc.dfsoft.project.biz.base.common.entity</value>
				<value>cc.dfsoft.project.biz.base.station.entity</value>
				<value>cc.dfsoft.project.biz.base.withgas.entity</value>
				<value>cc.dfsoft.project.biz.base.annualplan.entity</value>
				<value>cc.dfsoft.project.biz.base.update.entity</value>
				<value>cc.dfsoft.project.biz.base.maintain.entity</value>
				<value>cc.dfsoft.project.biz.ifs.log.entity</value>
			</list>
		</property>
	</bean>

	<!-- 定义事务管理 -->
	<bean id="transactionManager"
		  class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

	<!-- 定义 Autowired 自动注入 bean -->
	<bean
			class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<!-- 扫描有注解的文件 base-package 包路径 -->
	<context:component-scan
			base-package="
			cc.dfsoft.project.biz.base.mapper,
			cc.dfsoft.project.biz.base.project.dao,
			cc.dfsoft.project.biz.base.project.service,
			cc.dfsoft.project.biz.base.design.dao,
			cc.dfsoft.project.biz.base.design.service,
			cc.dfsoft.project.biz.base.budget.dao,
			cc.dfsoft.project.biz.base.budget.service,
			cc.dfsoft.uexpress.biz.sys.dept.dao,
			cc.dfsoft.uexpress.biz.sys.dept.service,
			cc.dfsoft.uexpress.biz.sys.auth.dao,
			cc.dfsoft.uexpress.biz.sys.auth.service,
			cc.dfsoft.project.biz.base.constructmanage.dao,
			cc.dfsoft.project.biz.base.constructmanage.service,
			cc.dfsoft.project.biz.base.contract.dao,
			cc.dfsoft.project.biz.base.contract.service,
			cc.dfsoft.project.biz.base.accept.dao,
			cc.dfsoft.project.biz.base.accept.service,
			cc.dfsoft.project.biz.base.plan.dao,
			cc.dfsoft.project.biz.base.plan.service,
			cc.dfsoft.project.biz.base.charge.dao,
			cc.dfsoft.project.biz.base.charge.service,
			cc.dfsoft.project.biz.base.subpackage.dao,
			cc.dfsoft.project.biz.base.subpackage.service,
			cc.dfsoft.project.biz.base.projectbase.dao,
			cc.dfsoft.project.biz.base.projectbase.service,
			cc.dfsoft.project.biz.base.baseinfo.dao,
			cc.dfsoft.project.biz.base.baseinfo.service,
			cc.dfsoft.project.biz.base.auditina.service,
			cc.dfsoft.project.biz.base.inspection.dao,
			cc.dfsoft.project.biz.base.inspection.service,
			cc.dfsoft.project.biz.base.change.service,
			cc.dfsoft.project.biz.base.change.dao,
			cc.dfsoft.project.biz.base.complete.service,
			cc.dfsoft.project.biz.base.complete.dao,
			cc.dfsoft.project.biz.base.settlement.service,
			cc.dfsoft.project.biz.base.settlement.dao,
			cc.dfsoft.project.biz.base.common.service,
			cc.dfsoft.project.biz.base.common.dao,
			cc.dfsoft.project.biz.base.monitor.service,
			cc.dfsoft.project.biz.base.monitor.dao,
			cc.dfsoft.uexpress.common.sqlConveter,
			cc.dfsoft.project.biz.base.station.service,
			cc.dfsoft.project.biz.base.station.dao,
			cc.dfsoft.project.biz.base.withgas.service,
			cc.dfsoft.project.biz.base.withgas.dao,
			cc.dfsoft.project.biz.base.annualplan.dao,
			cc.dfsoft.project.biz.base.annualplan.service,
			cc.dfsoft.project.biz.base.update.dao,
			cc.dfsoft.project.biz.base.update.service,
			cc.dfsoft.project.biz.ifs.finance.service,
			cc.dfsoft.project.biz.ifs.project.service,
			cc.dfsoft.project.biz.ifs.projectQuery.service,
			cc.dfsoft.project.biz.ifs.material.service,
			cc.dfsoft.project.biz.base.maintain.dao,
			cc.dfsoft.project.biz.base.maintain.service,
			cc.dfsoft.project.biz.ifs.log.dao,
			cc.dfsoft.project.biz.ifs.log.service,
			cc.dfsoft.project.biz.base.messagesync.service,
			cc.dfsoft.project.biz.base.messagesync.*,
			cc.dfsoft.project.biz.base.accept.controller"/>



	<!-- <context:component-scan
    base-package="
        cc.dfsoft.uexpress.biz.base.addr.dao,
        cc.dfsoft.uexpress.biz.base.cust.dao,
        cc.dfsoft.uexpress.biz.base.meter.dao,
        cc.dfsoft.uexpress.biz.base.account.dao,
        cc.dfsoft.uexpress.biz.base.changerecord.dao,
        cc.dfsoft.uexpress.biz.base.meterread.dao,
        cc.dfsoft.uexpress.biz.base.price.dao,
        cc.dfsoft.uexpress.biz.base.audit.dao,
        cc.dfsoft.uexpress.biz.base.cost.dao,
        cc.dfsoft.uexpress.biz.base.ic.dao,
        cc.dfsoft.uexpress.biz.base.addr.service,
        cc.dfsoft.uexpress.biz.base.cust.service,
        cc.dfsoft.uexpress.biz.base.meter.service,
        cc.dfsoft.uexpress.biz.base.account.service,
        cc.dfsoft.uexpress.biz.base.meterread.service,
        cc.dfsoft.uexpress.biz.base.price.service,
        cc.dfsoft.uexpress.biz.base.audit.service,
        cc.dfsoft.uexpress.biz.base.cost.service,
        cc.dfsoft.uexpress.biz.base.ic.service,

        cc.dfsoft.uexpress.biz.base.changerecord.service
        "/>
     -->


	<!-- task任务扫描注解 -->
	<task:annotation-driven/>


</beans>
